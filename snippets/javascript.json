{
	"afterEach": {
		"prefix": "ae",
		"body": "\nafterEach(function() => {\n\t$1\n});\n\t",
		"description": "afterEach is called once after each spec",
		"scope": "source.js"
	},
	"beforeEach": {
		"prefix": "be",
		"body": "\nbeforeEach(function() => {\n\t$1\n});\n\t",
		"description": "beforeEach is called once before each spec",
		"scope": "source.js"
	},
	"callsAll": {
		"prefix": "ca",
		"body": "${1:spy}.calls.all()\n\t",
		"description": "spy.calls.all"
	},
	"callsAllArgs": {
		"prefix": "caa",
		"body": "${1:spy}.calls.allArgs()\n\t",
		"description": "spy.calls.allArgs"
	},
  "callsAny": {
    "prefix": "ca",
    "body": "${1:spy}.calls.any()\n\t"
  },
  "callsArgsFor": {
		"prefix": "caf",
		"body": "${1:spy}.calls.argsFor(${2:call number})\n\t"
	},
	"callsCount": {
		"prefix": "cc",
		"body": "${1:spy}.calls.count()\n\t"
	},
	"callsFirst": {
		"prefix": "cf",
		"body": "${1:spy}.calls.first()\n\t"
	},
	"callsMostRecent": {
		"prefix": "cmr",
		"body": "${1:spy}.calls.mostRecent()\n\t"
	},
	"callsReset": {
		"prefix": "cr",
		"body": "${1:spy}.calls.reset()\n\t",
		"description": "clears all tracking for a spy"
	},
	"createSpy": {
		"prefix": "cs",
		"body": "jasmine.createSpy('${1:name}');$0"
	},
	"createSpyObject": {
		"prefix": "cso",
		"body": "jasmine.createSpyObj('${1:spy name}', ['${2:method name}'$3]);$0"
	},
	"describe": {
		"prefix": "desc",
		"body": "\ndescribe('${1:Name of the group}', function() {\n\t$2\n});\n\t"
	},
  "expect": {
		"prefix": "exp",
		"body": "expect($1)$0"
	},
	"it": {
		"prefix": "it",
		"body": "\nit('$1', function() {\n\t$2\n});\n\t"
	},
  "toBe": {
		"prefix": "tb",
		"body": "expect($1).toBe($2);$0\n\t"
	},
	"toBeCloseTo": {
		"prefix": "tbct",
		"body": "expect($1).toBeCloseTo(${2:number}, ${3:delta});$0\n\t"
	},
	"toBeDefined": {
		"prefix": "tbd",
		"body": "expect($1).toBeDefined();$0\n\t"
	},
	"toBeFalsy": {
		"prefix": "tbf",
		"body": "expect($1).toBeFalsy();$0\n\t"
	},
	"toBeGreaterThan": {
		"prefix": "tbgt",
		"body": "expect($1).toBeGreaterThan($2);$0\n\t"
	},
	"toBeLessThan": {
		"prefix": "tblt",
		"body": "expect($1).toBeLessThan($2);$0\n\t"
	},
	"toBeNull": {
		"prefix": "tbn",
		"body": "expect($1).toBeNull();$0\n\t"
	},
	"toBeTruthy": {
		"prefix": "tbt",
		"body": "expect($1).toBeTruthy();$0\n\t"
	},
	"toBeUndefined": {
		"prefix": "tbu",
		"body": "expect($1).toBeUndefined();$0\n\t"
	},
	"toContain": {
		"prefix": "tc",
		"body": "expect(${1:array}).toContain(${2:item});$0\n\t"
	},
	"toEqual": {
		"prefix": "te",
		"body": "expect($1).toEqual($2);$0\n\t"
	},
	"toHaveBeenCalled": {
		"prefix": "thbc",
		"body": "expect($1).toHaveBeenCalled();$0\n\t"
	},
	"toHaveBeenCalledWith": {
		"prefix": "thbcw",
		"body": "expect($1).toHaveBeenCalledWith(${2:params});$0\n\t"
	},
	"toMatch": {
		"prefix": "tm",
		"body": "expect($1).toMatch($2);$0\n\t"
	},
	"toThrow": {
		"prefix": "tt",
		"body": "expect($1).toThrow();$0\n\t"
	},
	"toThrowError": {
		"prefix": "tte",
		"body": "expect($1).toThrowError(${2:error});$0"
	},
}